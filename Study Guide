Unit 1: Variables

Topics: Integers, Strings, Lists, Booleans

Vocab:
initialize - set the value of a variable (e.g. x = 5, day = "Thursday", sussy = True)
conditional statements (conditionals) - statement that is evaluated as true or false
operators - special symbols that indicate some sort of computation. Five main types: Arithmetic, Assignment, Comparison, Logical, and Membership (don't worry about remembering all of these)
Here is a more comprehensive list of operators: https://www.w3schools.com/python/python_operators.asp
assignment operator - used to assign a value to a variable (e.g. '=', '+=', '-=')
arithmetic operators - used with numeric values to perform common mathematical operations (e.g. '+', '-', '*', '%')
comparison operators - used to compare two values (e.g. '==', '!=', '>', '<=')
logical operators - used to combine conditional statements ('and', 'or', 'not')
membership operators - used to check if something is in a list ('in', 'not in')
concatenation - adding two strings (see line 41)
method - a function that is available because of an objects type (upper(), lower(), append()) (see line 51)
index - the position of an element in a list
syntax - writing code so that it can be correctly interpreted by your computer
parameter - the value that is inputted into a function (ex. list.append("green eggs and ham"))



Integers
Any non fraction (5, 40, -29)

how to initialize:
# stores the value 5 in the variable x
x = 5
# the same as x = x + 10
x += 10
# returns the remainder of x / 3
y = x % 3


Strings
letters or symbols enclosed by quotation marks ("Dune", "Sandwich!", "Let's go to the park")

how to initialize:
generic_greeting = "Hello, how are you?"
# can be added and multiplied like integers
# this prints "Hello, how are you? I've been better", try it yourself :D
print(generic_greeting + " I've been better")
generic_response = "¯\_(ツ)_/¯"
# This prints "¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯", try it yourself ¯\_(ツ)_/¯
print(generic_response * 5)

How to concatenate:
# the "\n" starts a new line, try it yourself :))))
small_talk = generic_greeting + "\n" + generic_response
name = "shaqiqi"
print("My name is " + name)

List methods:
# This will print "Coding club is so much fun"
real_club_review = "codINg CluB iS sO mUcH FUn"
print(real_club_review.capitalize())
# This will print "CODING CLUB IS SO MUCH FUN!"
print(real_club_review.upper())
# You can find more methods here https://www.w3schools.com/python/python_ref_string.asp

Misc info:
# you can think of a string as a list of characters (see the lists section for more information)
# this means you can access certain elements of a string
print(name[4])
print(real_club_review[:5])


Lists
an ordered, changeable collection of variables called 'elements' ([4, 6, 10], ["How's it going", "What's up", "What's poppin"], [["One", "Two", "Three"], [1, 2, 3], ["1", "10", "11"]])

How to initialize:
fruits = ["Durian", "Rambutan", "Lychee"]
fav_numbers = [28, 4, 3]

Lists are ordered by index. The first element in a list is at index 0.
The index is used to access elements from a list
print(fruits[0])

Splits
You can access multiple elements from a list by using a split
syntax: fruits[0:2] accesses the first two elements (the first number is inclusive, the second number is exclusive)
fruits[1:3] accesses the last two elements (notice how the second number is 3, but the index of the last element is 2)
fruits[:2] is the same as fruits[0:2] (it assumes that you are starting at 0)
fruits[1:] is the same as fruits[1:3] (it assumes that you want to access every element from 1 to the end of the list)
examples (try it yourself :O):
vowels = ['a', 'e', 'i', 'o', 'u']
print("The first three vowels are: " + vowels[:3])
print("The last three vowels are: " + vowels[2:])
print("The middle three vowels are: " + vowels[1:4])

Methods 
try these out yourself :-)
# adds a value to the end of a list
.append()
fruits.append("Goji Berries")
# removes the last element of a list
.remove()
fruits.remove()
# removes an element at a specified index
.pop()
fruits.pop(1)
# inserts an element at a specified index
.insert()
fruits.insert("Camu", 1)
# sorts a list alphabetically or numerically
.sort()
print(fruits.sort())
# shuffles a list
.shuffle()
print(fruits.shuffle())
# reverses the order of a list
.reverse()
print(fruits.reverse())
# more list methods at https://www.w3schools.com/python/python_ref_list.asp

Range
range will return a list of a sequence of numbers
this will be very important when we get to for loops
range(the first number is the start, the second number is the end, the last number is the step)
the 'step' means it will count by that number (i.e. if it's a two, range will return a list with every other number from the start to the end, if it is a three it will return a list with every third number, and so on)
if there is only one parameter, the start is 0 by default, and if there are two parameters, the step is 1 by default
examples you can try yourself :p 
print(range(100))
print(range(50, 100))
print(range(1, 101))
print(range(20, 100, 3))



Booleans
True or False
used to store a value that is either true or false
useful for functions, if statements, and while loops, but we'll get there
For now it's just important to keep in mind that this is how you initialize a boolean:
tall = True
brown_eyes = False
likes_coding = True
(keep in mind the capitalization)
