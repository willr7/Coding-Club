Unit 2: If Statements and loops


Important vocab:
iteration - in a loop, an iteration is one cycle through the loop
indexing variable - the variable that is changed from one iteration to the next. 'i' is generally the name used for this variable




If statements:
checks a conditional statement and if it returns true, then it executes some code
conditional statements can use many different operators
Here is a more comprehensive list of all the operators: https://www.w3schools.com/python/python_operators.asp

syntax:
if some condition:
  execute some code
  
examples:
# This example uses the greater than comparison operator
if (x + 3) > (y / 5):
  print("x is 3 greater than y divided by 5")

# This example uses the 'and' logical operator
if a >= 5 and a <= 10:
  print("a is greater than or equal to 5 and less than or equal to 10")

# This example uses the 'in' membership operator
fruit = "Apple"
if 'a' in fruit or x % 3 == 0:
  print("either the letter a is in the string fruit, or x is divisible by 3")
  

Elif and Else statements
if an if statement is evaluated as false, then python will go on to check any elif or else statements that follow
elif: if the preceding if statement is false, then it will check another condition
else: if the preceding if statement is false, then it will execute the code

syntax:
if some condition:
  execute some code
elif some other condition:
  execute some code
else:
  execute some code
  
example:
a = 4
b = 17
c = 13

if a >= b and a >= c:
  print("a is the greatest number")
elif b >= c:
  print("b is the greatest number")
else:
  print("c is the greatest number")

fav_animal = 'Beluga'
zoo_animals = ['Lion', 'Hippopotamus', 'Giraffe', 'Tiger']

if fav_animal in zoo_animals:
  print("This zoo has my favorite animal!")
else:
  print("This zoo doesn't have my favorite animal );")



grade = 72

# notice how in this example the else statement could be replaced with another elif statement. Both ways are fine, but it is best to use 
if grade < 70:
  print("See me after class >:(")
elif grade >= 70 and grade > 80:
  print("You passed, but you should probably study more :/")
elif grade >= 80 and grade < 90:
  print("Not bad :P. Go for an A next time!")
else:
  print("AMAZING :DDDDD")



Loops
2 types: For loops and while loops
While loops run until a condition is false
For loops run for a set number of times

while loop syntax:
while some condition is true:
  execute some code
  
examples:
a = 5

# this while loop will add one to the value of a until a is greater than or equal to 10
while a < 10:
  a += 1
  
side note:
to get input in python, we use input()
the question that you want to display goes inside the parantheses, and you can set a variable as being equal to the user's response

#this will store the users name in a the variable 'name'
name = input("What is your name? \n")


# This while loop will continue to ask the same question until the user gets the question right
question = "What is the tallest building in the world \n(a) Eiffel Tower \n(b) Berj Khalifa \n(c) Empire State Building \n(d) World Trade Center \n"

answer = input(question)
while answer != 'b':
  answer = input("Incorrect, try again \n")
else:
  print("Correct!")
# notice the else statement. This will execute once the condition in the while loop is false, which means that in this case it will print "Correct!" when the user types 'b'


For loops
A for loop will iterate through every element in a list using an indexing variable

Syntax:
for indexing variable in some list:
  execute some code

side note (will be important later)
if you want to know what iteration you are on when going through a list, you can use index()
ex.
fruits = ["banana", "apple", "pear"]

# try these yourself to understand how .index works
for fruit in fruits:
  print(fruit)
  print(fruits.index(fruit))

print(fruits.index("apple"))
  
 
examples:
characters = ["001", "067", "456", "199", "218"]

for character in characters:
  print(character)

# remember range()?
# This will return a list from 0 to 99
for i in range(100)
  print(i)

# This adds three strings to the fav_characters list and prints the characters
fav_characters = []

for i in range(3):
  fav_characters.append(input("Name a character from your favorite tv show"))

print(f"Three characters in your favorite show are: {fav_characters[0]}, {fav_characters[1]}, and {fav_characters[2]}")
  

# Fizz buzz
for i in range(1, 101):
  if i % 15:
    print("FizzBuzz")
  elif i % 3 == 0:
    print("Fizz")
  elif i % 5 == 0:
    print("Buzz")
  else:
    print(i)

# alternate solution to fizz buzz
# This is a more concise solution
# notice how the if statements have the code that they execute in the same line
# this is a shortcut in python to make if statements more compact, but it only works if the if statement has one line of code to execute
# also, notice how this solution doesn't use elif or else statements. What would happen if the middle if statement was changed to an elif and the last if was an else?
for i in range(1, 101):
  temp = ''
  if i % 3 == 0: temp += 'Fizz'
  if i % 5 == 0: temp += "Buzz"
  if temp == '': print(i)


Exercise:
Trivia

Make a list of questions (see example under while loop examples) and a list of answers. Ask the questions using a for loop. If the user gets the question wrong, ask the question again until the user gets the question right (use a while loop).
Optional: print the users score at the end of the quiz


Steps:
first, make a list of questions
ex.
questions = ["What is the tallest building in the world? \n(a) Eiffel Tower \n(b) Berj Khalifa \n(c) Empire State Building \n(d) World Trade Center \n", "What is my favorite color? \n(a) Blue \n(b) Red \n(c) Purple \n(d) Rich Mahogany \n", "What is the longest river in the world? \n(a) Nile \n(b) Mississippi \n(c) Colorado \n(d) Amazon \n"]

next, make a list of the correct answers
answers = ['b', 'd', 'a']

now, you can iterate through each question in the list of questions with a for loop
for question in questions:
  response = input(question)

Finally, we can use a while loop and index() to get the users input until they get the question right, and when they do we can print "Correct!" with an else statement
for question in questions:
  response = input(question)
  while response != answers[questions.index(question)]:
    response = input("Incorrect, try again \n")
  else:
    print("Correct! \n")

How to get the users score:
score = 0

for question in questions:
  response = input(question)
  
  if response == answers[questions.index(question)]:
    score += 1
  
  while response != answers[questions.index(question)]:
    response = input("Incorrect, try again \n")
  else:
    print("Correct! \n")

print("Your score: {}".format(score))
